name: Build and Deploy to AWS Staging

on:
  workflow_dispatch:
    inputs:
      ecrBackendRepo:
        description: ECR repo name for backend
        required: true
        default: light-score-backend
      ecrFrontendRepo:
        description: ECR repo name for frontend
        required: true
        default: light-score-frontend

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.ref }}-push-images
  cancel-in-progress: false

jobs:
  build-and-deploy:
    name: Build images and deploy to App Runner
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_BACKEND_REPO: ${{ inputs.ecrBackendRepo }}
      ECR_FRONTEND_REPO: ${{ inputs.ecrFrontendRepo }}
      ECR_REGION: eu-north-1
      APPRUNNER_REGION: eu-central-1
    steps:
      - uses: actions/checkout@v4

      # Use the App Runner region for AWS credential config
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.APPRUNNER_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-actions-push-images

      # Log in to ECR in eu-north-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: ${{ env.ECR_REGION }}

      - name: Ensure ECR repositories exist (eu-north-1)
        shell: bash
        run: |
          set -euo pipefail
          for repo in "${ECR_BACKEND_REPO}" "${ECR_FRONTEND_REPO}"; do
            if ! aws ecr describe-repositories --repository-names "$repo" --region "$ECR_REGION" >/dev/null 2>&1; then
              aws ecr create-repository --repository-name "$repo" --region "$ECR_REGION" >/dev/null
              echo "Created ECR repository: $repo"
            else
              echo "ECR repository exists: $repo"
            fi
          done

      - name: Build and push backend image (to eu-north-1 ECR)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        shell: bash
        run: |
          set -euo pipefail
          BACKEND_IMAGE="$ECR_REGISTRY/${ECR_BACKEND_REPO}"
          docker build -f backend/Dockerfile -t "$BACKEND_IMAGE:${GITHUB_SHA}" -t "$BACKEND_IMAGE:staging" .
          docker push "$BACKEND_IMAGE:${GITHUB_SHA}"
          docker push "$BACKEND_IMAGE:staging"

      - name: Build and push frontend image (to eu-north-1 ECR)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        shell: bash
        run: |
          set -euo pipefail
          FRONTEND_IMAGE="$ECR_REGISTRY/${ECR_FRONTEND_REPO}"
          docker build -f frontend/Dockerfile -t "$FRONTEND_IMAGE:${GITHUB_SHA}" -t "$FRONTEND_IMAGE:staging" .
          docker push "$FRONTEND_IMAGE:${GITHUB_SHA}"
          docker push "$FRONTEND_IMAGE:staging"

      - name: Deploy to App Runner services (in eu-central-1)
        id: deploy
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ACCESS_ROLE_ARN: ${{ secrets.AWS_APPRUNNER_ACCESS_ROLE_ARN }}
        run: |
          set -euo pipefail

          BACKEND_SERVICE_NAME="light-score-backend-staging"
          FRONTEND_SERVICE_NAME="light-score-frontend-staging"

          BACKEND_IMAGE="$ECR_REGISTRY/${ECR_BACKEND_REPO}:staging"
          FRONTEND_IMAGE="$ECR_REGISTRY/${ECR_FRONTEND_REPO}:staging"

          get_service_arn_by_name () {
            local name="$1"
            aws apprunner list-services --region "$APPRUNNER_REGION" \
              --query "ServiceSummaryList[?ServiceName=='${name}'].ServiceArn | [0]" \
              --output text
          }

          wait_for_service_ready () {
            local service_arn="$1"
            echo "Waiting for service to be ready..."
            for i in {1..30}; do
              local status=$(aws apprunner describe-service --region "$APPRUNNER_REGION" --service-arn "$service_arn" --query 'Service.Status' --output text)
              echo "Status: $status (attempt $i/30)"
              if [ "$status" = "RUNNING" ]; then
                echo "Service is ready!"
                return 0
              elif [ "$status" = "CREATE_FAILED" ] || [ "$status" = "UPDATE_FAILED" ]; then
                echo "Service deployment failed with status: $status"
                return 1
              fi
              sleep 30
            done
            echo "Timeout waiting for service to be ready"
            return 1
          }

          # ---- Backend ----
          BACKEND_ARN="$(get_service_arn_by_name "$BACKEND_SERVICE_NAME")"
          if [ "$BACKEND_ARN" != "None" ] && [ -n "$BACKEND_ARN" ]; then
            echo "Updating backend..."
            aws apprunner update-service --region "$APPRUNNER_REGION" \
              --service-arn "$BACKEND_ARN" \
              --source-configuration "{
                \"ImageRepository\": {
                  \"ImageIdentifier\": \"${BACKEND_IMAGE}\",
                  \"ImageConfiguration\": { \"Port\": \"8000\" },
                  \"ImageRepositoryType\": \"ECR\"
                },
                \"AutoDeploymentsEnabled\": true,
                \"AuthenticationConfiguration\": {
                  \"AccessRoleArn\": \"${ACCESS_ROLE_ARN}\"
                }
              }"
          else
            echo "Creating backend..."
            BACKEND_ARN=$(aws apprunner create-service --region "$APPRUNNER_REGION" \
              --service-name "$BACKEND_SERVICE_NAME" \
              --source-configuration "{
                \"ImageRepository\": {
                  \"ImageIdentifier\": \"${BACKEND_IMAGE}\",
                  \"ImageConfiguration\": { \"Port\": \"8000\" },
                  \"ImageRepositoryType\": \"ECR\"
                },
                \"AutoDeploymentsEnabled\": true,
                \"AuthenticationConfiguration\": {
                  \"AccessRoleArn\": \"${ACCESS_ROLE_ARN}\"
                }
              }" \
              --instance-configuration "{\"Cpu\":\"0.25 vCPU\",\"Memory\":\"0.5 GB\"}" \
              --health-check-configuration "{\"Protocol\":\"HTTP\",\"Path\":\"/\",\"Interval\":10,\"Timeout\":5,\"HealthyThreshold\":1,\"UnhealthyThreshold\":5}" \
              --query 'Service.ServiceArn' --output text)
          fi

          echo "Waiting backend..."
          wait_for_service_ready "$BACKEND_ARN"
          BACKEND_URL="https://$(aws apprunner describe-service --region "$APPRUNNER_REGION" --service-arn "$BACKEND_ARN" --query 'Service.ServiceUrl' --output text)"
          echo "Backend URL: $BACKEND_URL"

          # ---- Frontend ----
          FRONTEND_ARN="$(get_service_arn_by_name "$FRONTEND_SERVICE_NAME")"
          if [ "$FRONTEND_ARN" != "None" ] && [ -n "$FRONTEND_ARN" ]; then
            echo "Updating frontend..."
            aws apprunner update-service --region "$APPRUNNER_REGION" \
              --service-arn "$FRONTEND_ARN" \
              --source-configuration "{
                \"ImageRepository\": {
                  \"ImageIdentifier\": \"${FRONTEND_IMAGE}\",
                  \"ImageConfiguration\": {
                    \"Port\": \"5000\",
                    \"RuntimeEnvironmentVariables\": { \"BACKEND_URL\": \"${BACKEND_URL}\" }
                  },
                  \"ImageRepositoryType\": \"ECR\"
                },
                \"AutoDeploymentsEnabled\": true,
                \"AuthenticationConfiguration\": {
                  \"AccessRoleArn\": \"${ACCESS_ROLE_ARN}\"
                }
              }"
          else
            echo "Creating frontend..."
            FRONTEND_ARN=$(aws apprunner create-service --region "$APPRUNNER_REGION" \
              --service-name "$FRONTEND_SERVICE_NAME" \
              --source-configuration "{
                \"ImageRepository\": {
                  \"ImageIdentifier\": \"${FRONTEND_IMAGE}\",
                  \"ImageConfiguration\": {
                    \"Port\": \"5000\",
                    \"RuntimeEnvironmentVariables\": { \"BACKEND_URL\": \"${BACKEND_URL}\" }
                  },
                  \"ImageRepositoryType\": \"ECR\"
                },
                \"AutoDeploymentsEnabled\": true,
                \"AuthenticationConfiguration\": {
                  \"AccessRoleArn\": \"${ACCESS_ROLE_ARN}\"
                }
              }" \
              --instance-configuration "{\"Cpu\":\"0.25 vCPU\",\"Memory\":\"0.5 GB\"}" \
              --health-check-configuration "{\"Protocol\":\"HTTP\",\"Path\":\"/\",\"Interval\":10,\"Timeout\":5,\"HealthyThreshold\":1,\"UnhealthyThreshold\":5}" \
              --query 'Service.ServiceArn' --output text)
          fi

          echo "Waiting frontend..."
          wait_for_service_ready "$FRONTEND_ARN"
          FRONTEND_URL=$(aws apprunner describe-service --region "$APPRUNNER_REGION" --service-arn "$FRONTEND_ARN" --query 'Service.ServiceUrl' --output text)

          echo "ðŸŽ‰ Deployment complete!"
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          {
            echo "### Deployment Summary ðŸš€"
            echo "- Backend: ${{ steps.deploy.outputs.BACKEND_URL }}"
            echo "- Frontend: ${{ steps.deploy.outputs.FRONTEND_URL }}"
          } >> $GITHUB_STEP_SUMMARY
